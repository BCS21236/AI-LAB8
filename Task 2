import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # g(n): cost to reach this node
        self.h = h  # h(n): heuristic value of this node
        self.f = g + h  # f(n) = g(n) + h(n)

    def __lt__(self, other):
        return self.f < other.f

def a_star_search(start, goal, heuristic_func, neighbors_func):
    # Priority queue (min-heap) to store nodes with their f values
    open_list = []
    heapq.heappush(open_list, Node(start, g=0, h=heuristic_func(start, goal)))

    # Dictionary to keep track of the cost to reach each state
    g_costs = {start: 0}

    # Set to keep track of visited nodes
    visited = set()

    while open_list:
        current_node = heapq.heappop(open_list)
        current_state = current_node.state

        # If the goal is reached, return the path
        if current_state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        visited.add(current_state)

        # Explore neighbors
        for neighbor in neighbors_func(current_state):
            tentative_g = current_node.g + 1  # Assuming uniform cost (can be modified)

            if neighbor in visited:
                continue

            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                h = heuristic_func(neighbor, goal)
                heapq.heappush(open_list, Node(neighbor, parent=current_node, g=tentative_g, h=h))

    # Return None if no path is found
    return None

# Example usage:

# Define a simple heuristic function (e.g., Manhattan distance)
def heuristic(node, goal):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

# Define neighbors for a simple grid
def neighbors(node):
    x, y = node
    return [(x + dx, y + dy) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]]

# Test the A* algorithm
start = (0, 0)
goal = (4, 4)
path = a_star_search(start, goal, heuristic, neighbors)

print("Path found:", path)
