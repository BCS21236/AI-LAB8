import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # g(n): cost to reach this node
        self.h = h  # h(n): heuristic value of this node
        self.f = g + h  # f(n) = g(n) + h(n)

    def __lt__(self, other):
        return self.f < other.f

def a_star_search(start, goal, heuristic_func, neighbors_func):
    # Priority queue (min-heap) to store nodes with their f values
    open_list = []
    heapq.heappush(open_list, Node(start, g=0, h=heuristic_func(start, goal)))

    # Dictionary to keep track of the cost to reach each state
    g_costs = {start: 0}

    # Set to keep track of visited nodes
    visited = set()

    while open_list:
        current_node = heapq.heappop(open_list)
        current_state = current_node.state

        # If the goal is reached, return the path
        if current_state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        visited.add(current_state)

        # Explore neighbors
        for neighbor in neighbors_func(current_state):
            tentative_g = current_node.g + 1  # Assuming uniform cost (can be modified)

            if neighbor in visited:
                continue

            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                h = heuristic_func(neighbor, goal)
                heapq.heappush(open_list, Node(neighbor, parent=current_node, g=tentative_g, h=h))

    # Return None if no path is found
    return None

# Heuristic function: Number of misplaced tiles
def misplaced_tiles(state, goal):
    return sum(1 for i in range(len(state)) if state[i] != goal[i] and state[i] != 0)

# Neighbors function for the 8-puzzle problem
def neighbors(state):
    neighbors_list = []
    index = state.index(0)  # Find the index of the empty space (0)

    # Possible moves: up, down, left, right
    possible_moves = {
        0: [1, 3], 1: [0, 2, 4], 2: [1, 5],
        3: [0, 4, 6], 4: [1, 3, 5, 7], 5: [2, 4, 8],
        6: [3, 7], 7: [4, 6, 8], 8: [5, 7]
    }

    for move in possible_moves[index]:
        new_state = list(state)
        new_state[index], new_state[move] = new_state[move], new_state[index]
        neighbors_list.append(tuple(new_state))

    return neighbors_list

# Test the A* algorithm on the 8-puzzle problem
start = (1, 2, 3, 4, 0, 5, 6, 7, 8)  # Start state (arbitrary example)
goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)  # Goal state

path = a_star_search(start, goal, misplaced_tiles, neighbors)

# Print the solution path
if path:
    print("Solution found in", len(path) - 1, "moves:")
    for step in path:
        print(step[:3])
        print(step[3:6])
        print(step[6:])
        print()
else:
    print("No solution found")
