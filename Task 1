#GREEDY-FIRST-SEARCH
import heapq

class Node:
    def __init__(self, state, parent=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.cost = cost  # g(n): cost to reach this node
        self.heuristic = heuristic  # h(n): heuristic value of this node

    def __lt__(self, other):
        return self.heuristic < other.heuristic

def greedy_best_first_search(start, goal, heuristic_func, neighbors_func):
    # Priority queue (min-heap) to store nodes with their heuristic values
    open_list = []
    heapq.heappush(open_list, Node(start, heuristic=heuristic_func(start)))

    # Set to keep track of visited nodes
    visited = set()

    while open_list:
        current_node = heapq.heappop(open_list)
        current_state = current_node.state

        # If the goal is reached, return the path
        if current_state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        visited.add(current_state)

        # Explore neighbors
        for neighbor in neighbors_func(current_state):
            if neighbor in visited:
                continue
            heuristic = heuristic_func(neighbor)
            heapq.heappush(open_list, Node(neighbor, parent=current_node, heuristic=heuristic))

    # Return None if no path is found
    return None

# Example usage:

# Define a simple heuristic function (e.g., Manhattan distance)
def heuristic(node, goal=(4, 4)):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

# Define neighbors for a simple grid
def neighbors(node):
    x, y = node
    return [(x + dx, y + dy) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]]

# Test the GBFS algorithm
start = (0, 0)
goal = (4, 4)
path = greedy_best_first_search(start, goal, lambda x: heuristic(x, goal), neighbors)

print("Path found:", path)
